package com.hjs.pattern.p4.singleton;
/**
 *   饿汉式
 *   多线程安全,这种方式比较常用，但容易产生垃圾对象,类加载时就初始化，浪费内存
 *   它基于 classloader 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，
 *   虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 
 *   但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，
 *   这时候初始化 instance 显然没有达到 lazy loading 的效果。
 * @author Administrator
 *
 */
public class Singleton3 {
    private static Singleton3 instance = new Singleton3();  
    private Singleton3 (){}  
    public static Singleton3 getInstance() {  
    return instance;  
    }  
}
